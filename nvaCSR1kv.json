{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmName": {
            "type": "string",
            "defaultValue": "myCsr"
        },
        "vnetName": {
            "defaultValue": "[concat(parameters('vmName'), '-vnet')]",
            "type": "string"
        },
        "vnetPrefix": {
            "defaultValue": "192.168.100.0/24",
            "type": "string"
        },
        "subnetName": {
            "defaultValue": "subnet1",
            "type": "string"
        },
        "subnetPrefix": {
            "defaultValue": "192.168.100.0/26",
            "type": "string"
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2_v2"
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "lab-user"
        },
        "adminPassword": {
            "type": "securestring"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        }
    },
    "variables": {
        "networkApiVersion": "2018-04-01",
        "computeApiVersion": "2018-06-01",
        "storageApiVersion": "2018-07-01",
        "pipName": "[concat(parameters('vmName'), '-pip')]",
        "pipType": "Static",
        "pipSku": "Basic",
        "nicName": "[concat(parameters('vmName'), '-nic')]",
        "nsgName": "[concat(parameters('vmName'), '-nsg')]",
        "nsgRules": [
            {
                "name": "SSH",
                "properties": {
                    "priority": 1010,
                    "protocol": "TCP",
                    "access": "Allow",
                    "direction": "Inbound",
                    "sourceApplicationSecurityGroups": [],
                    "destinationApplicationSecurityGroups": [],
                    "sourceAddressPrefix": "*",
                    "sourcePortRange": "*",
                    "destinationAddressPrefix": "*",
                    "destinationPortRange": "22"
                }
            }
        ],
        "nsgId": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('nsgName'))]",
        "vnetId": "[resourceId(resourceGroup().name, 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('subnetName'))]",
        "autoShutdownStatus": "Enabled",
        "autoShutdownTime": "19:00",
        "autoShutdownTimeZone": "UTC",
        "autoShutdownNotificationStatus": "Disabled",
        "autoShutdownNotificationLocale": "en",
        "storageName": "[toLower(concat('diag', uniqueString(concat(resourceGroup().id), parameters('vmName'))))]",
        "storageId": "[resourceId(resourceGroup().name, 'Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "diagnosticsStorageAccountName": "[variables('storageName')]",
        "diagnosticsStorageAccountId": "[variables('storageId')]",
        "diagnosticsStorageAccountType": "Standard_LRS",
        "diagnosticsStorageAccountKind": "Storage",
        "osDiskType": "StandardSSD_LRS"
   },
    "resources": [
        {
            "comments": "Create Vnet with one subnet",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('vnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('subnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('subnetPrefix')]"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Crate NIC for VM",
            "name": "[variables('nicName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('nsgName')]",
                "[variables('pipName')]",
                "[parameters('vnetName')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": {
                                "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/publicIpAddresses', variables('pipName'))]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[variables('nsgId')]"
                }
            },
            "tags": {}
        },
        {
            "comments": "NSG allowing port 22",
            "name": "[variables('nsgName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": "[variables('nsgRules')]"
            },
            "tags": {}
        },
        {
            "comments": "PIP for the NVA",
            "name": "[variables('pipName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[parameters('location')]",
            "properties": {
                "publicIpAllocationMethod": "[variables('pipType')]"
            },
            "sku": {
                "name": "[variables('pipSku')]"
            },
            "tags": {}
        },
        {
            "comments": "Virtual Machine",
            "name": "[parameters('vmName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('nicName')]",
                "[variables('storageName')]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[variables('osDiskType')]"
                        }
                    },
                    "imageReference": {
                        "publisher": "cisco",
                        "offer": "cisco-csr-1000v",
                        "sku": "16_9-byol",
                        "version": "16.9.120180924"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                        }
                    ]
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('https://', variables('diagnosticsStorageAccountName'), '.blob.core.windows.net/')]"
                    }
                }
            },
            "plan": {
                "name": "16_9-byol",
                "publisher": "cisco",
                "product": "cisco-csr-1000v"
            },
            "tags": {}
        },
        {
            "comments": "Storage Account for diagnostics",
            "name": "[variables('diagnosticsStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[parameters('location')]",
            "properties": {},
            "kind": "[variables('diagnosticsStorageAccountKind')]",
            "sku": {
                "name": "[variables('diagnosticsStorageAccountType')]"
            },
            "tags": {}
        },
        {
            "comments": "Shutdown schedule",
            "name": "[concat('shutdown-computevm-', parameters('vmName'))]",
            "type": "Microsoft.DevTestLab/schedules",
            "apiVersion": "2017-04-26-preview",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
            ],
            "properties": {
                "status": "[variables('autoShutdownStatus')]",
                "taskType": "ComputeVmShutdownTask",
                "dailyRecurrence": {
                    "time": "[variables('autoShutdownTime')]"
                },
                "timeZoneId": "[variables('autoShutdownTimeZone')]",
                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                "notificationSettings": {
                    "status": "[variables('autoShutdownNotificationStatus')]",
                    "notificationLocale": "[variables('autoShutdownNotificationLocale')]",
                    "timeInMinutes": "30"
                }
            },
            "tags": {}
        },
        {
            "comments": "Nested template to wait for VM creation before fetching the allocated public IP",
            "name": "fetchIpAddress",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[uri(deployment().properties.templateLink.uri, 'fetchIpAddress.json')]"
                },
                "parameters": {
                    "publicIPAddressId": {
                        "value": "[resourceId('Microsoft.Network/publicIPAddresses', variables('pipName'))]"
                    }
                }
            },
            "dependsOn": [
                "[parameters('vmName')]"
            ]
        },
        {
            "comments": "Nested template to wait for VM creation before fetching the allocated private IP of the NIC",
            "name": "fetchNicIpAddress",
            "apiVersion": "2017-05-10",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[uri(deployment().properties.templateLink.uri, 'fetchNicIpAddress.json')]"
                },
                "parameters": {
                    "nicId": {
                        "value": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
                    }
                }
            },
            "dependsOn": [
                "[parameters('vmName')]"
            ]
        }
    ],
    "outputs": {
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "public_ip_address": {
            "type": "string",
            "value": "[reference('fetchIpAddress').outputs.ipAddress.value]"
        },
        "private_ip_address": {
            "type": "string",
            "value": "[reference('fetchNicIpAddress').outputs.ipAddress.value]"
        }        
    }
}