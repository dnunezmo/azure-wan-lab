# Tested with zsh

# Variables
rg=vwan
vwan=vwan
location1=westeurope
location2=westus2
username=jose
password=Microsoft123!
publisher=cisco
offer=cisco-csr-1000v
sku=16_12-byol
version=$(az vm image list -p $publisher -f $offer -s $sku --all --query '[0].version' -o tsv)
vwan_hub1_prefix=172.21.10.0/24
azure_hub1_prefix=172.21.12.0/24
azure_hub1_subnet=172.21.12.0/26
azure_hub1_nva_ip=172.21.12.10
azure_spoke1_prefix=172.21.11.0/24
azure_spoke1_subnet=172.21.11.0/26
azure_spoke1_vm_ip=172.21.11.11
branch1_prefix=172.21.200.0/24
branch1_subnet=172.21.200.0/26
branch1_bgp_ip=172.21.200.10
vwan_hub2_prefix=172.22.10.0/24
branch2_prefix=172.22.200.0/24
branch2_subnet=172.22.200.0/26
branch2_bgp_ip=172.22.200.10
branch2_2ary_bgp_ip=172.22.200.20
azure_hub2_prefix=172.22.12.0/24
azure_hub2_subnet=172.22.12.0/26
azure_hub2_nva_ip=172.22.12.10
azure_hub2_2ary_nva_ip=172.22.12.20
azure_spoke2_prefix=172.22.11.0/24
azure_spoke2_subnet=172.22.11.0/26
azure_spoke2_vm_ip=172.22.11.11
vwan_hub1_asn=65515
vwan_hub2_asn=65515
branch1_asn=65501
branch2_asn=65502

# Start
az group create -n $rg -l $location1

# vwan and hubs
az network vwan create -n $vwan -g $rg -l $location1 --branch-to-branch-traffic true --vnet-to-vnet-traffic true
az network vhub create -n hub1 -g $rg --vwan $vwan -l $location1 --address-prefix $vwan_hub1_prefix
az network vhub create -n hub2 -g $rg --vwan $vwan -l $location2 --address-prefix $vwan_hub2_prefix

# Branch 1. Parallelizing the vpn gw creation is not recommended
az vm create -n branch1-nva -g $rg -l $location1 --image ${publisher}:${offer}:${sku}:${version} --admin-username "$username" --generate-ssh-keys --public-ip-address branch1-pip --public-ip-address-allocation static --vnet-name branch1 --vnet-address-prefix $branch1_prefix --subnet nva --subnet-address-prefix $branch1_subnet --private-ip-address $branch1_bgp_ip
branch1_ip=$(az network public-ip show -n branch1-pip -g $rg --query ipAddress -o tsv)
az network vpn-site create -n branch1 -g $rg -l $location1 --virtual-wan $vwan --asn $branch1_asn --bgp-peering-address $branch1_bgp_ip --ip-address $branch1_ip --address-prefixes ${branch1_ip}/32 --device-vendor cisco --device-model csr --link-speed 100
az network vpn-gateway create -n hubvpn1 -g $rg -l $location1 --vhub hub1 --asn $vwan_hub1_asn
az network vpn-gateway connection create -n branch1 --gateway-name hubvpn1 -g $rg --remote-vpn-site branch1 --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10

# Branch 2. Parallelizing the vpn gw creation is not recommended
az vm create -n branch2-nva -g $rg -l $location2 --image ${publisher}:${offer}:${sku}:${version} --admin-username "$username" --generate-ssh-keys --public-ip-address branch2-pip --public-ip-address-allocation static --vnet-name branch2 --vnet-address-prefix $branch2_prefix --subnet nva --subnet-address-prefix $branch2_subnet --private-ip-address $branch2_bgp_ip
branch2_ip=$(az network public-ip show -n branch2-pip -g $rg --query ipAddress -o tsv)
az network vpn-site create -n branch2 -g $rg -l $location2 --virtual-wan $vwan --asn $branch2_asn --bgp-peering-address $branch2_bgp_ip --ip-address $branch2_ip --address-prefixes ${branch2_ip}/32
az network vpn-gateway create -n hubvpn2 -g $rg -l $location2 --vhub hub2 --asn $vwan_hub2_asn
az network vpn-gateway connection create -n branch2 --gateway-name hubvpn2 -g $rg --remote-vpn-site branch2 --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10

# Add public keys to known_hosts
# You should do this a little while after provisioning the CSR, it takes a while for the SSH daemon to come up
ssh-keyscan -H $branch1_ip >> ~/.ssh/known_hosts
ssh-keyscan -H $branch2_ip >> ~/.ssh/known_hosts

# Download configuration
# Setting SAS
storage_account=vpnconfigs$RANDOM 
container_name=configs
blob_name=vpnconfig.json
file_name="/tmp/${blob_name}"
az storage account create -n $storage_account -g $rg -l $location1 --sku Standard_LRS
az storage container create -n $container_name --account-name $storage_account
end_time=`date -u -d "30 minutes" '+%Y-%m-%dT%H:%MZ'`
sas=$(az storage container generate-sas -n $container_name --account-name $storage_account --permissions dlrw --expiry $end_time -o tsv)
account_url=$(az storage account show -n $storage_account -g $rg --query primaryEndpoints.blob -o tsv)
storage_url=${account_url}${container_name}"/"${blob_name}"?"${sas}
az network vpn-site download --vwan-name $vwan -g $rg --vpn-sites branch1 branch2 --output-blob-sas-url $storage_url
az storage blob download --account-name $storage_account -c $container_name -n $blob_name --sas-token $sas -f $file_name

# Extract info for branch1
site=branch1
branch1_psk=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].connectionConfiguration.PSK')
branch1_gw0_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance0')
branch1_gw1_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance1')
branch1_gw0_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance0')
branch1_gw1_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance1')
echo "Extracted info for $site: Gateway0 $branch1_gw0_pip, $branch1_gw0_bgp_ip. Gateway1 $branch1_gw1_pip, branch1_gw0_bgp_ip. PSK $branch1_psk"

# Extract info for branch2
site=branch2
branch2_psk=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].connectionConfiguration.PSK')
branch2_gw0_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance0')
branch2_gw1_pip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.IpAddresses.Instance1')
branch2_gw0_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance0')
branch2_gw1_bgp_ip=$(cat $file_name | jq -r '.[] | select (.vpnSiteConfiguration.Name == "'$site'") | .vpnSiteConnections[].gatewayConfiguration.BgpSetting.BgpPeeringAddresses.Instance1')
echo "Extracted info for $site: Gateway0 $branch2_gw0_pip, $branch2_gw0_bgp_ip. Gateway1 $branch2_gw1_pip, branch2_gw0_bgp_ip. PSK $branch2_psk"

# Create CSR config for branch 1
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_2tunnels_tokenized.txt"
config_file_csr='branch1_csr.cfg'
config_file_local='/tmp/branch1_csr.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch1_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch1_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch1_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch1_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch1_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch1_asn}|g" $config_file_local
scp $config_file_local ${branch1_ip}:/${config_file_csr}
ssh $branch1_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch1_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch1_ip "wr mem"
ssh $branch1_ip "sh ip int b"

# Create CSR config for branch 2
# If you are going to cross-connect branch2 to both hubs, you want to skip this and go to the 4-tunnel config
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_2tunnels_tokenized.txt"
config_file_csr='branch2_csr.cfg'
config_file_local='/tmp/branch2_csr.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch2_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch2_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch2_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch2_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch2_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch2_asn}|g" $config_file_local
scp $config_file_local ${branch2_ip}:/${config_file_csr}
ssh $branch2_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch2_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch2_ip "wr mem"
ssh $branch2_ip "sh ip int b"

# Optional:
# Add a cross link for one of the sites (branch2-hub1) -> Not working!
az network vpn-gateway connection create -n branch2-to-hub1 --gateway-name hubvpn1 -g $rg --remote-vpn-site branch2 --enable-bgp true --protocol-type IKEv2 --shared-key "$password"
# Create CSR config for branch 2 with 4 tunnels
csr_config_url="https://raw.githubusercontent.com/erjosito/azure-wan-lab/master/csr_config_4tunnels_tokenized.txt"
config_file_csr='branch2_csr_4tunnels.cfg'
config_file_local='/tmp/branch2_csr_4tunnels.cfg'
wget $csr_config_url -O $config_file_local
sed -i "s|\*\*PSK\*\*|${branch2_psk}|g" $config_file_local
sed -i "s|\*\*GW0_Private_IP\*\*|${branch2_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW1_Private_IP\*\*|${branch2_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW2_Private_IP\*\*|${branch1_gw0_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW3_Private_IP\*\*|${branch1_gw1_bgp_ip}|g" $config_file_local
sed -i "s|\*\*GW0_Public_IP\*\*|${branch2_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW1_Public_IP\*\*|${branch2_gw1_pip}|g" $config_file_local
sed -i "s|\*\*GW2_Public_IP\*\*|${branch1_gw0_pip}|g" $config_file_local
sed -i "s|\*\*GW3_Public_IP\*\*|${branch1_gw1_pip}|g" $config_file_local
sed -i "s|\*\*BGP_ID\*\*|${branch2_asn}|g" $config_file_local
scp $config_file_local ${branch2_ip}:/${config_file_csr}
ssh $branch2_ip <<EOF
  config t
    file prompt quiet
EOF
ssh $branch2_ip "copy bootflash:${config_file_csr} running-config"
ssh $branch2_ip "wr mem"
ssh $branch2_ip "sh ip int b"

# Hub&spoke location 1
az vm create -n azure-nva1 -g $rg -l $location1 --image ${publisher}:${offer}:${sku}:${version} --admin-username $username --generate-ssh-keys --public-ip-address hub1-pip --public-ip-address-allocation static --vnet-name hub-$location1 --vnet-address-prefix $azure_hub1_prefix --subnet nva --subnet-address-prefix $azure_hub1_subnet --private-ip-address $azure_hub1_nva_ip --no-wait
az vm create -n spoke-vm1 -g $rg -l $location1 --image ubuntuLTS --admin-username $username --generate-ssh-keys --public-ip-address spoke1-pip --vnet-name spoke-$location1 --vnet-address-prefix $azure_spoke1_prefix --subnet vm --subnet-address-prefix $azure_spoke1_subnet --private-ip-address $azure_spoke1_vm_ip --no-wait
sleep 30  # Wait 30 seconds for the creation of the vnets, so that we can configure the peerings
az network vnet peering create -n spoke2hub -g $rg --vnet-name spoke-$location1 --remote-vnet hub-$location1 --allow-vnet-access --allow-forwarded-traffic
az network vnet peering create -n hub2spoke -g $rg --vnet-name hub-$location1 --remote-vnet spoke-$location1 --allow-vnet-access --allow-forwarded-traffic
az network vhub connection create -n tohub -g $rg --vhub-name hub1 --remote-vnet hub-$location1 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true
az network route-table create -n spoke1 -g $rg -l $location1 --disable-bgp-route-propagation
az network route-table route create -n branch1 -g $rg --route-table-name spoke1 --address-prefix $branch1_prefix --next-hop-type VirtualAppliance --next-hop-ip-address $azure_hub1_nva_ip
az network vnet subnet update -n vm --vnet-name spoke-$location1 -g $rg --route-table spoke1
#az network vhub route add --vhub-name hub1 -g $rg --address-prefixes $azure_spoke1_prefix --next-hop $azure_hub1_nva_ip

# Hub&spoke location 2
# Add --no-wait to the az vm create commands?
az vm create -n azure-nva2 -g $rg -l $location2 --image ${publisher}:${offer}:${sku}:${version} --admin-username $username --generate-ssh-keys --public-ip-address hub2-pip --public-ip-address-allocation static --vnet-name hub-$location2 --vnet-address-prefix $azure_hub2_prefix --subnet nva --subnet-address-prefix $azure_hub2_subnet --private-ip-address $azure_hub2_nva_ip --no-wait
az vm create -n spoke-vm2 -g $rg -l $location2 --image ubuntuLTS --admin-username $username --generate-ssh-keys --public-ip-address spoke2-pip --vnet-name spoke-$location2 --vnet-address-prefix $azure_spoke2_prefix --subnet vm --subnet-address-prefix $azure_spoke2_subnet --private-ip-address $azure_spoke2_vm_ip --no-wait
sleep 30  # Wait 30 seconds for the creation of the vnets, so that we can configure the peerings
az network vnet peering create -n spoke2hub -g $rg --vnet-name spoke-$location2 --remote-vnet hub-$location2 --allow-vnet-access --allow-forwarded-traffic
az network vnet peering create -n hub2spoke -g $rg --vnet-name hub-$location2 --remote-vnet spoke-$location2 --allow-vnet-access --allow-forwarded-traffic
az network vhub connection create -n tohub -g $rg --remote-vnet hub-$location2 --vhub-name hub2 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true
az network route-table create -n spoke2 -g $rg -l $location2 --disable-bgp-route-propagation
az network route-table route create -n branch2 -g $rg --route-table-name spoke2 --address-prefix $branch2_prefix --next-hop-type VirtualAppliance --next-hop-ip-address $azure_hub2_nva_ip
az network vnet subnet update -n vm --vnet-name spoke-$location2 -g $rg --route-table spoke2
#az network vhub route add --vhub-name hub2 -g $rg --address-prefixes $azure_spoke2_prefix --next-hop $azure_hub2_nva_ip

# Optional: 2nd NVA in branch2 - WORK IN PROGRESS!!!!
az vm create -n branch2-2ary-nva -g $rg -l $location1 --image ${publisher}:${offer}:${sku}:${version} --admin-username "$username" --generate-ssh-keys --public-ip-address branch1-pip --public-ip-address-allocation static --vnet-name branch1 --vnet-address-prefix $branch1_prefix --subnet nva --subnet-address-prefix $branch1_subnet --private-ip-address $branch1_bgp_ip
branch2_2ary_ip=$(az network public-ip show -n branch1-pip -g $rg --query ipAddress -o tsv)
az network vpn-site create -n branch1 -g $rg -l $location1 --virtual-wan $vwan --asn $branch1_asn --bgp-peering-address $branch1_bgp_ip --ip-address $branch1_ip --address-prefixes ${branch1_ip}/32 --device-vendor cisco --device-model csr --link-speed 100

# Option 1: modify the existing site with a new IP address
az network vpn-site update

# Option 2: add a new site
az network vpn-site create -n branch2-2ary -g $rg -l $location2 --virtual-wan $vwan --asn $branch2_asn --bgp-peering-address $branch2_bgp_ip --ip-address $branch2_ip --address-prefixes ${branch2_2ary_ip}/32
az network vpn-gateway connection create -n branch2-2ary --gateway-name hubvpn1 -g $rg --remote-vpn-site branch2-2ary --enable-bgp true --protocol-type IKEv2 --shared-key "$password" --connection-bandwidth 100 --routing-weight 10

# vHub Route tables (???)
az network vhub route-table create -n vnets --vhub-name hub1 -g $rg -l $location1 --connections All_Vnets --destination-type CIDR --destinations 172.21.11.0/24 --next-hop-type IPAddress --next-hops 172.21.12.10
az network vhub route-table create -n branches --vhub-name hub1 -g $rg -l $location1 --connections All_Branches --destination-type CIDR --destinations 172.21.11.0/24 --next-hop-type IPAddress --next-hops 172.21.12.10

# Troubleshooting
az network public-ip list -g $rg -o table
az network nic show-effective-route-table -n spoke-vm1VMNic -g $rg -o table
az network nic show-effective-route-table -n azure-nva1VMNic -g $rg -o table
az network nic show-effective-route-table -n spoke-vm2VMNic -g $rg -o table
az network nic show-effective-route-table -n azure-nva2VMNic -g $rg -o table
az network route-table route list --route-table-name spoke2 -g $rg -o table
az network vhub connection list --vhub-name hub1 -g $rg -o table
az network vhub route-table list --vhub-name hub1 -g $rg -o table
az network vhub route list --vhub-name hub1 -g $rg -o table
az network vpn-site list -g $rg -o table
az network vpn-gateway list -g $rg -o table
az network vpn-gateway connection list --gateway-name hubvpn1 -g $rg -o table
ssh $username@$branch1_ip "sh ip bgp"
ssh $username@$branch1_ip "sh ip interface brief"
ssh $username@$branch1_ip "sh ip route"