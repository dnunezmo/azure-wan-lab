# Tested with zsh

# Description:
# - No hybrid connectivity (VPN or ER)
# - Spoke vnets attached to vhub (no customer-managed NVAs in customer-managed hubs)
# - vhubs are secured (have an AzFw)
# - Spoke-to-spoke traffic does not flow through the Firewall
# - Vnet-to-Internet traffic flows through the firewall

# Variables
rg=vwan
vwan=vwan
location1=westeurope
location2=westus2
password=Microsoft123!
vwan_hub1_prefix=172.21.10.0/24
hub1_fw_ip=172.21.10.68
azure_spoke1_prefix=172.21.11.0/24
azure_spoke1_subnet=172.21.11.0/26
azure_spoke1_vm_ip=172.21.11.11
vwan_hub2_prefix=172.22.10.0/24
hub2_fw_ip=172.22.10.68
azure_spoke2_prefix=172.22.11.0/24
azure_spoke2_subnet=172.22.11.0/26
azure_spoke2_vm_ip=172.22.11.11

# Start
az group create -n $rg -l $location1

# vwan and hubs
az network vwan create -n $vwan -g $rg -l $location1 --branch-to-branch-traffic true --vnet-to-vnet-traffic true
az network vhub create -n hub1 -g $rg --vwan $vwan -l $location1 --address-prefix $vwan_hub1_prefix
az network vhub create -n hub2 -g $rg --vwan $vwan -l $location2 --address-prefix $vwan_hub2_prefix

# Create firewalls in vhubs - This takes around 25min per firewall
vhub1_id=$(az network vhub show -n hub1 -g $rg --query id -o tsv)
vhub2_id=$(az network vhub show -n hub2 -g $rg --query id -o tsv)
az network firewall create -n vhub1-fw -g $rg -l $location1 --vhub $vhub1_id --sku AZFW_Hub
az network firewall create -n vhub2-fw -g $rg -l $location2 --vhub $vhub2_id --sku AZFW_Hub

# **WORKAROUND** to create Route Service -> deploy a VPN gateway that can be deleted afterwards (soon to disappear)
az network vpn-gateway create -n hubvpn1 -g $rg -l $location1 --vhub hub1 --no-wait
az network vpn-gateway create -n hubvpn2 -g $rg -l $location2 --vhub hub2 --no-wait

# Spoke location 1
az vm create -n spoke-vm1 -g $rg -l $location1 --image ubuntuLTS --generate-ssh-keys --public-ip-address spoke1-pip --vnet-name spoke-$location1 --vnet-address-prefix $azure_spoke1_prefix --subnet vm --subnet-address-prefix $azure_spoke1_subnet --private-ip-address $azure_spoke1_vm_ip --no-wait
sleep 30  # Wait 30 seconds for the creation of the vnets, so that we can configure the peerings
az network vhub connection create -n tospoke -g $rg --vhub-name hub1 --remote-vnet spoke-$location1 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true

# Spoke location 2
az vm create -n spoke-vm2 -g $rg -l $location2 --image ubuntuLTS --generate-ssh-keys --public-ip-address spoke2-pip --vnet-name spoke-$location2 --vnet-address-prefix $azure_spoke2_prefix --subnet vm --subnet-address-prefix $azure_spoke2_subnet --private-ip-address $azure_spoke2_vm_ip --no-wait
sleep 30  # Wait 30 seconds for the creation of the vnets, so that we can configure the peerings
az network vhub connection create -n tohub -g $rg --remote-vnet spoke-$location2 --vhub-name hub2 --remote-vnet-transit true --use-hub-vnet-gateways true --internet-security true

# Routing in vhub: Vnet-to-Vnet
# Current problems:
# - FW IP address cannot be retrieved dynamically
# - VhhV not working because of asymmetric routing
# az network vhub route-table create -n vnets --vhub-name hub1 -g $rg -l $location1 --connections All_Vnets \
#     --destination-type CIDR --destinations 172.21.11.0/24 172.22.11.0/24 --next-hop-type IPAddress --next-hops $hub1_fw_ip
# az network vhub route-table create -n vnets --vhub-name hub2 -g $rg -l $location2 --connections All_Vnets \
#     --destination-type CIDR --destinations 172.21.11.0/24 172.22.11.0/24 --next-hop-type IPAddress --next-hops $hub2_fw_ip

# Routing in vhub: Vnet-to-Internet
# Note that FW's IP address is hard coded as a variable
az network vhub route-table create -n vnets --vhub-name hub1 -g $rg -l $location1 --connections All_Vnets \
    --destination-type CIDR --destinations 0.0.0.0/0 --next-hop-type IPAddress --next-hops $hub1_fw_ip
az network vhub route-table create -n vnets --vhub-name hub2 -g $rg -l $location2 --connections All_Vnets \
    --destination-type CIDR --destinations 0.0.0.0/0 --next-hop-type IPAddress --next-hops $hub2_fw_ip

# Add workaround to access IP address of your system over the public Internet, 
my_ip=$(curl -s4 ifconfig.co)
az network route-table create -n spoke1 -g $rg -l $location1
az network route-table route create -n callhome -g $rg --route-table-name spoke1 --address-prefix ${my_ip}/32 --next-hop-type Internet
az network vnet subnet update -n vm --vnet-name spoke-$location1 -g $rg --route-table spoke1
az network route-table create -n spoke2 -g $rg -l $location2
az network route-table route create -n callhome -g $rg --route-table-name spoke2 --address-prefix ${my_ip}/32 --next-hop-type Internet
az network vnet subnet update -n vm --vnet-name spoke-$location2 -g $rg --route-table spoke2

# Enable logs for firewalls
log_ws_name=$(az monitor log-analytics workspace list -g $rg --query '[0].name' -o tsv)
if [[ -z "$log_ws_name" ]]
then
  echo "No log-analytics workspace found, creating one"
  log_ws_name=vwanlogs$RANDOM
  az monitor log-analytics workspace create -n $log_ws_name -g $rg -l $location1
else
  echo "Found log analytics workspace $log_ws_name"
fi
log_ws_id=$(az resource list -n $log_ws_name -g $rg --query '[].id' -o tsv)
azfw1_id=$(az network firewall show -n vhub1-fw -g $rg -o tsv --query id)
az monitor diagnostic-settings create -n azfw1diag --resource $azfw1_id --workspace $log_ws_id \
      --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
      --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
               {"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'
azfw2_id=$(az network firewall show -n vhub2-fw -g $rg -o tsv --query id)
az monitor diagnostic-settings create -n azfw2diag --resource $azfw2_id --workspace $log_ws_id \
      --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false }, "timeGrain": null}]' \
      --logs '[{"category": "AzureFirewallApplicationRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}, 
               {"category": "AzureFirewallNetworkRule", "enabled": true, "retentionPolicy": {"days": 0, "enabled": false}}]'

# Firewall policy
az network firewall policy create -n vwanfwpolicy -g $rg
fw_policy_id=$(az network firewall policy show -n vwanfwpolicy -g $rg --query id -o tsv)
az network firewall policy rule-collection-group create -n rulecollgroup --policy-name vwanfwpolicy -g $rg --priority 200
az network firewall policy rule-collection-group collection add-filter-collection --policy-name vwanfwpolicy -g $rg \
  --name tools --rule-collection-group rulecollgroup --collection-priority 200 \
  --protocols Https=443 --target-fqdns "ifconfig.co" --source-addresses "*" --action Allow
az network firewall update -n vhub1-fw -g $rg --firewall-policy $fw_policy_id
az network firewall update -n vhub2-fw -g $rg --firewall-policy $fw_policy_id

# If VPN gateways are completely deployed, delete them (this will soon disappear, when the workaround to deploy RS is not needed)
vpn1_state=$(az network vpn-gateway show -n hubvpn1 -g $rg --query 'provisioningState' -o tsv)
if [[ $vpn1_state == "Succeeded" ]]
then
  az network vpn-gateway delete -n hubvpn1 -g $rg
else
  echo "VPN Gateway cannot be deleted, still in state $vpn1_state"
fi
vpn2_state=$(az network vpn-gateway show -n hubvpn2 -g $rg --query 'provisioningState' -o tsv)
if [[ $vpn2_state == "Succeeded" ]]
then
  az network vpn-gateway delete -n hubvpn2 -g $rg
else
  echo "VPN Gateway cannot be deleted, still in state $vpn2_state"
fi

# Access to spoke VMs
spoke1_pip_address=$(az network public-ip show -n spoke1-pip -g $rg --query 'ipAddress' -o tsv)
spoke2_pip_address=$(az network public-ip show -n spoke2-pip -g $rg --query 'ipAddress' -o tsv)
ssh-keyscan -H $spoke1_pip_address >> ~/.ssh/known_hosts
ssh-keyscan -H $spoke2_pip_address >> ~/.ssh/known_hosts
ssh $spoke1_pip_address "ip a"
ssh $spoke2_pip_address "ip a"

# Spoke to spoke connectivity
ssh $spoke1_pip_address "ping 172.22.11.11"
ssh $spoke2_pip_address "ping 172.21.11.11"

# Spoke to internet connectivity
ssh $spoke1_pip_address "curl -s4 http://ifconfig.co"  # HTTP not allowed through the AzFw
ssh $spoke1_pip_address "curl -s4 https://ifconfig.co" # HTTPS to ifconfig.co allowed through the AzFw
ssh $spoke2_pip_address "curl -s4 http://ifconfig.co"  # HTTP not allowed through the AzFw
ssh $spoke2_pip_address "curl -s4 https://ifconfig.co" # HTTPS to ifconfig.co allowed through the AzFw

# Troubleshooting - routing
az network public-ip list -g $rg -o table
az network nic show-effective-route-table -n spoke-vm1VMNic -g $rg -o table
az network nic show-effective-route-table -n spoke-vm2VMNic -g $rg -o table
az network route-table route list --route-table-name spoke2 -g $rg -o table
az network vhub connection list --vhub-name hub1 -g $rg -o table
az network vhub route-table list --vhub-name hub1 -g $rg -o table
az network vhub route-table route list -n vnets --vhub-name hub1 -g $rg
az network vhub route list --vhub-name hub1 -g $rg -o table
az network vhub route-table list --vhub-name hub2 -g $rg -o table
az network vhub route-table route list -n vnets --vhub-name hub2 -g $rg

# Troubleshooting - FW policy
az network firewall policy rule-collection-group list --policy-name vwanfwpolicy -g $rg -o table
az network firewall policy rule-collection-group collection list --rule-collection-group rulecollgroup --policy-name vwanfwpolicy -g $rg -o table
az network firewall policy rule-collection-group collection list --rule-collection-group rulecollgroup --policy-name vwanfwpolicy -g $rg

# Troubleshooting - AzFw logs   (see https://docs.microsoft.com/azure/firewall/log-analytics-samples)
log_ws_customerid=$(az monitor log-analytics workspace show -n $log_ws_name -g $rg --query customerId -o tsv 2>/dev/null)
# app rule query example
query_apprule='AzureDiagnostics
| where Category == "AzureFirewallApplicationRule"
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " " TempDetails
| parse TempDetails with "was " Action1 ". Reason: " Rule1
| parse TempDetails with "to " FQDN ":" TargetPortInt:int ". Action: " Action2 "." *
| parse TempDetails with * ". Rule Collection: " RuleCollection2a ". Rule:" Rule2a
| parse TempDetails with * "Deny." RuleCollection2b ". Proceeding with" Rule2b
| extend SourcePort = tostring(SourcePortInt)
| extend TargetPort = tostring(TargetPortInt)
| extend Action1 = case(Action1 == "Deny","Deny","Unknown Action")
| extend Action = case(Action2 == "",Action1,Action2),Rule = case(Rule2a == "", case(Rule1 == "",case(Rule2b == "","N/A", Rule2b),Rule1),Rule2a), 
RuleCollection = case(RuleCollection2b == "",case(RuleCollection2a == "","No rule matched",RuleCollection2a), RuleCollection2b),FQDN = case(FQDN == "", "N/A", FQDN),TargetPort = case(TargetPort == "", "N/A", TargetPort)
| project TimeGenerated, msg_s, Protocol, SourceIP, SourcePort, FQDN, TargetPort, Action ,RuleCollection, Rule'
# net rule query example
query_netrule='AzureDiagnostics
| where Category == "AzureFirewallNetworkRule"
| parse msg_s with Protocol " request from " SourceIP ":" SourcePortInt:int " to " TargetIP ":" TargetPortInt:int *
| parse msg_s with * ". Action: " Action1a
| parse msg_s with * " was " Action1b " to " NatDestination
| parse msg_s with Protocol2 " request from " SourceIP2 " to " TargetIP2 ". Action: " Action2
| extend SourcePort = tostring(SourcePortInt),TargetPort = tostring(TargetPortInt)
| extend Action = case(Action1a == "", case(Action1b == "",Action2,Action1b), Action1a),Protocol = case(Protocol == "", Protocol2, Protocol),SourceIP = case(SourceIP == "", SourceIP2, SourceIP),TargetIP = case(TargetIP == "", TargetIP2, TargetIP),SourcePort = case(SourcePort == "", "N/A", SourcePort),TargetPort = case(TargetPort == "", "N/A", TargetPort),NatDestination = case(NatDestination == "", "N/A", NatDestination)
| project TimeGenerated, msg_s, Protocol, SourceIP,SourcePort,TargetIP,TargetPort,Action, NatDestination'
# Send queries
az monitor log-analytics query -w $log_ws_customerid --analytics-query $query_apprule -o tsv
az monitor log-analytics query -w $log_ws_customerid --analytics-query $query_netrule -o tsv
